#!/usr/bin/python

#Switch SNMP Interface Wire list


#TODO
    #Handle Interfaces OperStatus
    #Handle Port Channels
    #Is it possible to handle vlan's ?


#Parameters:
verbose = False
SNMP_VERSION = 2
SNMP_COMMUNITY = 0
SNMP_HOST = 0
skip=0
return_code=0

import getopt, sys
import netsnmp
import re

def usage(exit_code):
    print 'Gathers LLDP SNMP data from Switch'
    print '%s -C <community> -H <hostname>' % sys.argv[0]
    print 'Options'
    print '-C or --community= SNMP Community'
    print '-H or --host=      Host'
    print '-h or --help       Show Help'
    sys.exit(exit_code)

#Parse Arguments
try:
    opts, args = getopt.getopt(sys.argv[1:],"C:H:h",["community=","host","help",])
except getopt.GetoptError:
        usage(2)
for opt, arg in opts:
    if opt in ("-h",   "--help"):
        usage(0)
    elif opt in ("-C", "--community"):
        SNMP_COMMUNITY= arg
    elif opt in ("-H", "--host"):
        SNMP_HOST = arg

#require parameters
if not SNMP_COMMUNITY or not SNMP_HOST:
    usage(2)


args = {
         "Version": SNMP_VERSION,
         "DestHost": SNMP_HOST,
         "Community": SNMP_COMMUNITY,
         "Timeout": 3000000,
         "Retries": 3,
         }

session = netsnmp.Session (**args)

dataPoints = {
        'ifDescr':         {'mib': 'IF-MIB::ifDescr', 'port' : [] },
        'ifAlias':         {'mib': 'IF-MIB::ifAlias', 'port' : [] },
#        'ifOperStatus':    {'mib': 'IF-MIB::ifOperStatus', 'port' : {} }, #TBD write unknown to ports that should be up but aren't
        'ifAdminStatus':   {'mib': 'IF-MIB::ifAdminStatus', 'port' : [] },
        'lldpRemSysName':  {'mib': 'LLDP-MIB::lldpRemSysName', 'port' : [] },
        'lldpRemPortId':   {'mib': 'LLDP-MIB::lldpRemPortId', 'port' : [] },
        'lldpRemPortDesc': {'mib': 'LLDP-MIB::lldpRemPortDesc', 'port' : [] },
        }

#Get the total number of interfaces on the switch
try: 
    ifNumber=session.get(netsnmp.VarList(netsnmp.Varbind('IF-MIB::ifNumber',0)))
    totalInterfaces=int(ifNumber[0])
except:
    print "Could not get the list of Interfaces on the device"
    exit(4)

#bulk request with all dataPoints we need
for item in dataPoints:
    #bind the variable list
    bulkVar = netsnmp.VarList( netsnmp.Varbind(dataPoints[item]['mib']))
    #Send SNMP query
    snmpData=session.getbulk(0, totalInterfaces, bulkVar)
    if not snmpData:
        print("Could not get SNMP data from host")
        exit(3)
    #assign the results to our dictionary
    for idx in xrange(len(snmpData)):
        dataPoints[item]['port'].append(snmpData[idx])


#Header
print('switch,port<=connects-to=>portId,portDesc,device')

for port in xrange(len(dataPoints['ifAdminStatus']['port'])):
    #Skip ports that are shutdown
    if dataPoints['ifAdminStatus']['port'][port] == '2':
        continue
    #replace hex to mac address string
    if not dataPoints['lldpRemPortId']['port'][port].isalnum():
        dataPoints['lldpRemPortId']['port'][port]=dataPoints['lldpRemPortId']['port'][port].encode('hex')
    #change interface name 'Interface   4 as eth0' to eth0'
    if re.search('^Interface\ +[0-9]+ as [a-z0-9]+',dataPoints['lldpRemPortDesc']['port'][port]):
        dataPoints['lldpRemPortDesc']['port'][port]=re.sub('^Interface\ +[0-9]+ as ','',dataPoints['lldpRemPortDesc']['port'][port])
    #Ignore Port Channels and Vlans
    if re.search('^(Port-Channel|Vlan)[0-9]+$',dataPoints['ifDescr']['port'][port]):
        continue

    print ("%s,%s<=connects-to=>%s,%s,%s" % ( SNMP_HOST, 
                                              dataPoints['ifDescr']['port'][port], 
                                              dataPoints['lldpRemPortId']['port'][port], 
                                              dataPoints['lldpRemPortDesc']['port'][port], 
                                              dataPoints['lldpRemSysName']['port'][port])
    )

exit(return_code)

vars = netsnmp.VarList(netsnmp.Varbind('IF-MIB::ifDescr'),
                       netsnmp.Varbind('IF-MIB::ifAlias'),
                       netsnmp.Varbind('IF-MIB::ifAdminStatus'),
                       netsnmp.Varbind('LLDP-MIB::lldpRemSysName'),
                       netsnmp.Varbind('LLDP-MIB::lldpRemPortId'),
                       netsnmp.Varbind('LLDP-MIB::lldpRemPortDesc'))

vals = session.getbulk(0, 16, vars)
print "v2 session.getbulk result: ", vals, "\n"

for var in vars:
 print var.tag, var.iid, "=", var.val, '(',var.type,')'

print "\n"    
